apiVersion: v1
kind: Namespace
metadata:
  annotations:
    "argocd.argoproj.io/sync-wave": "1"
    "helm.sh/hook": "post-install"
    "helm.sh/hook-weight": "1"
  name: capa-system
---
kind: Secret
apiVersion: v1
metadata:
  annotations:
    "argocd.argoproj.io/sync-wave": "2"
    "helm.sh/hook": "post-install"
    "helm.sh/hook-weight": "2"
  name: capa-manager-bootstrap-credentials
  namespace: capa-system
data:
  # This is used to help encode your environment variables
  # export AWS_REGION=us-east-1 
  # export AWS_ACCESS_KEY_ID=<your-access-key>
  # export AWS_SECRET_ACCESS_KEY=<your-secret-access-key>
  # export AWS_SESSION_TOKEN=<session-token> # If you are using Multi-Factor Auth.
  # Create the base64 encoded credentials using clusterawsadm.
  # This command uses your environment variables and encodes
  # them in a value to be stored in a Kubernetes Secret.
  # export AWS_B64ENCODED_CREDENTIALS=$(clusterawsadm bootstrap credentials encode-as-profile|base64 -w0)
  # echo $AWS_B64ENCODED_CREDENTIALS
  # Copy the output and set below
  AWS_B64ENCODED_CREDENTIALS: "{{ .Values.awsEncodedCredentials }}"
type: Opaque
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    "argocd.argoproj.io/sync-wave": "1"
    "helm.sh/hook": "post-install"
    "helm.sh/hook-weight": "1"
  labels:
    cluster.x-k8s.io/provider: infrastructure-aws
    clusterctl.cluster.x-k8s.io: ""
  name: capa-admin-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: capa-controller-manager
  namespace: capa-system
---
apiVersion: operator.cluster.x-k8s.io/v1alpha2
kind: InfrastructureProvider
metadata:
  annotations:
    "argocd.argoproj.io/sync-wave": "2"
    "helm.sh/hook": "post-install"
    "helm.sh/hook-weight": "2"
  name: aws
  namespace: capa-system
spec:
  configSecret:
    name: capa-manager-bootstrap-credentials
    namespace: capa-system
  manager:
    featureGates:
      ROSA: true
      EKS: true
  deployment:
    {{- with .Values.imagePullSecrets }}
    imagePullSecrets:
    {{- toYaml . | nindent 8 }}
    {{- end }}
    containers:
      - name: manager
        imageUrl: registry.redhat.io/openshift4/ose-aws-cluster-api-controllers-rhel9:{{ .Values.image.manager.tag  }}
        command:
          - /bin/cluster-api-provider-aws-controller-manager
        {{- if or (.Values.ocmToken) (.Values.ocmUrl) }}
        env:
          {{- if .Values.ocmUrl }}
          - name: OCM_API_URL
            value: {{ .Values.ocmUrl }}
          {{- end}}
          {{- if .Values.ocmToken}}
          - name: OCM_TOKEN
            value: {{ .Values.ocmToken }}
          {{- end}}
        {{- end }}

